using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

/*
 * Generated using https://app.quicktype.io/#l=cs&r=json2csharp
 * */

namespace dotnet_code_challenge.Model
{
    public partial class Welcome
    {
        [JsonProperty("FixtureId")]
        public string FixtureId { get; set; }

        [JsonProperty("Timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("RawData")]
        public RawData RawData { get; set; }
    }

    public partial class RawData
    {
        [JsonProperty("FixtureName")]
        public string FixtureName { get; set; }

        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("StartTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("Sequence")]
        public long Sequence { get; set; }

        [JsonProperty("Tags")]
        public RawDataTags Tags { get; set; }

        [JsonProperty("Markets")]
        public Market[] Markets { get; set; }

        [JsonProperty("Participants")]
        public Participant[] Participants { get; set; }
    }

    public partial class Market
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Selections")]
        public Selection[] Selections { get; set; }

        [JsonProperty("Tags")]
        public MarketTags Tags { get; set; }
    }

    public partial class Selection
    {
        [JsonProperty("Id")]
        public string Id { get; set; }

        [JsonProperty("Price")]
        public double Price { get; set; }

        [JsonProperty("Tags")]
        public SelectionTags Tags { get; set; }
    }

    public partial class SelectionTags
    {
        [JsonProperty("participant")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Participant { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class MarketTags
    {
        [JsonProperty("Places")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Places { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Participant
    {
        [JsonProperty("Id")]
        public long Id { get; set; }

        [JsonProperty("Name")]
        public string Name { get; set; }

        [JsonProperty("Tags")]
        public ParticipantTags Tags { get; set; }
    }

    public partial class ParticipantTags
    {
        [JsonProperty("Weight")]
        public string Weight { get; set; }

        [JsonProperty("Drawn")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Drawn { get; set; }

        [JsonProperty("Jockey")]
        public string Jockey { get; set; }

        [JsonProperty("Number")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Number { get; set; }

        [JsonProperty("Trainer")]
        public string Trainer { get; set; }
    }

    public partial class RawDataTags
    {
        [JsonProperty("CourseType")]
        public string CourseType { get; set; }

        [JsonProperty("Distance")]
        public string Distance { get; set; }

        [JsonProperty("Going")]
        public string Going { get; set; }

        [JsonProperty("Runners")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Runners { get; set; }

        [JsonProperty("MeetingCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long MeetingCode { get; set; }

        [JsonProperty("TrackCode")]
        public string TrackCode { get; set; }

        [JsonProperty("Sport")]
        public string Sport { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, dotnet_code_challenge.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, dotnet_code_challenge.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
